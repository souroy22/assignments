const nJwt = require('njwt')
import request from 'request'
import { TOKEN, EncodingAESKey } from './auth';
import * as api from './API'
import {  } from '../index.d'

function checkInit() {
    let error = ""
    if (!TOKEN) {
        error = "TOKEN不能为空，请先调用init方法初始化"
    }
    if (!EncodingAESKey) {
        error = "EncodingAESKey不能为空，请先调用init方法初始化"
    }
    return error
}

function genToken(query: any) {
    let jwt = nJwt.create(query, EncodingAESKey, "HS256");
    let token = jwt.compact();
    return token;
}

async function proxyNLP(nlpType: string, query: any) {
    return new Promise(async (resolve, reject) => {
        let error = checkInit()
        if (!!error) {
            reject(error)
            return
        }
        let token = genToken(query)
        let apiTmp:any = api
        let urlType = apiTmp[nlpType]
        let url = `${urlType}/${TOKEN}`
        await request.post(url, {
            json: {
                query: token
            }
        }, (error, stderr, stdout) => {
            if (error) {
                reject(error)
                return
            }
            resolve(stdout)
        })
    })
}

export { checkInit, genToken, proxyNLP }